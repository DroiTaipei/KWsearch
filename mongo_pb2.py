# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: mongo.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='mongo.proto',
  package='mongo',
  syntax='proto3',
  serialized_pb=_b('\n\x0bmongo.proto\x12\x05mongo\"u\n\x07\x63ontent\x12\x0c\n\x04\x62ody\x18\x01 \x01(\x0c\x12,\n\x07headers\x18\x02 \x03(\x0b\x32\x1b.mongo.content.HeadersEntry\x1a.\n\x0cHeadersEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x02\x38\x01\"u\n\x07request\x12\x0c\n\x04\x62ody\x18\x05 \x01(\x0c\x12,\n\x07headers\x18\x06 \x03(\x0b\x32\x1b.mongo.request.HeadersEntry\x1a.\n\x0cHeadersEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x02\x38\x01\"\x18\n\x08response\x12\x0c\n\x04\x62ody\x18\x02 \x01(\x0c\x32\xc4\x07\n\x05Mongo\x12(\n\x04\x65\x63ho\x12\x0e.mongo.content\x1a\x0e.mongo.content\"\x00\x12*\n\x05\x65ntry\x12\x0e.mongo.request\x1a\x0f.mongo.response\"\x00\x12\x31\n\x0c\x44ocumentSave\x12\x0e.mongo.request\x1a\x0f.mongo.response\"\x00\x12\x31\n\x0c\x44ocumentRead\x12\x0e.mongo.request\x1a\x0f.mongo.response\"\x00\x12\x33\n\x0e\x44ocumentDelete\x12\x0e.mongo.request\x1a\x0f.mongo.response\"\x00\x12\x30\n\x0bPasswordGet\x12\x0e.mongo.request\x1a\x0f.mongo.response\"\x00\x12\x30\n\x0bPasswordSet\x12\x0e.mongo.request\x1a\x0f.mongo.response\"\x00\x12\x33\n\x0ePasswordRemove\x12\x0e.mongo.request\x1a\x0f.mongo.response\"\x00\x12.\n\tGroupList\x12\x0e.mongo.request\x1a\x0f.mongo.response\"\x00\x12.\n\tGroupRead\x12\x0e.mongo.request\x1a\x0f.mongo.response\"\x00\x12.\n\tGroupSave\x12\x0e.mongo.request\x1a\x0f.mongo.response\"\x00\x12\x30\n\x0bGroupDelete\x12\x0e.mongo.request\x1a\x0f.mongo.response\"\x00\x12\x34\n\x0fGroupFindParent\x12\x0e.mongo.request\x1a\x0f.mongo.response\"\x00\x12\x34\n\x0fUsersFindParent\x12\x0e.mongo.request\x1a\x0f.mongo.response\"\x00\x12\x30\n\x0b\x42\x61tchCreate\x12\x0e.mongo.request\x1a\x0f.mongo.response\"\x00\x12\x32\n\rArchiveDelete\x12\x0e.mongo.request\x1a\x0f.mongo.response\"\x00\x12\x32\n\rCloudCacheGet\x12\x0e.mongo.request\x1a\x0f.mongo.response\"\x00\x12\x32\n\rCloudCacheSet\x12\x0e.mongo.request\x1a\x0f.mongo.response\"\x00\x12\x35\n\x10\x43loudCacheDelete\x12\x0e.mongo.request\x1a\x0f.mongo.response\"\x00\x62\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_CONTENT_HEADERSENTRY = _descriptor.Descriptor(
  name='HeadersEntry',
  full_name='mongo.content.HeadersEntry',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='key', full_name='mongo.content.HeadersEntry.key', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='value', full_name='mongo.content.HeadersEntry.value', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001')),
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=93,
  serialized_end=139,
)

_CONTENT = _descriptor.Descriptor(
  name='content',
  full_name='mongo.content',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='body', full_name='mongo.content.body', index=0,
      number=1, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='headers', full_name='mongo.content.headers', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_CONTENT_HEADERSENTRY, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=22,
  serialized_end=139,
)


_REQUEST_HEADERSENTRY = _descriptor.Descriptor(
  name='HeadersEntry',
  full_name='mongo.request.HeadersEntry',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='key', full_name='mongo.request.HeadersEntry.key', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='value', full_name='mongo.request.HeadersEntry.value', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001')),
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=93,
  serialized_end=139,
)

_REQUEST = _descriptor.Descriptor(
  name='request',
  full_name='mongo.request',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='body', full_name='mongo.request.body', index=0,
      number=5, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='headers', full_name='mongo.request.headers', index=1,
      number=6, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_REQUEST_HEADERSENTRY, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=141,
  serialized_end=258,
)


_RESPONSE = _descriptor.Descriptor(
  name='response',
  full_name='mongo.response',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='body', full_name='mongo.response.body', index=0,
      number=2, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=260,
  serialized_end=284,
)

_CONTENT_HEADERSENTRY.containing_type = _CONTENT
_CONTENT.fields_by_name['headers'].message_type = _CONTENT_HEADERSENTRY
_REQUEST_HEADERSENTRY.containing_type = _REQUEST
_REQUEST.fields_by_name['headers'].message_type = _REQUEST_HEADERSENTRY
DESCRIPTOR.message_types_by_name['content'] = _CONTENT
DESCRIPTOR.message_types_by_name['request'] = _REQUEST
DESCRIPTOR.message_types_by_name['response'] = _RESPONSE

content = _reflection.GeneratedProtocolMessageType('content', (_message.Message,), dict(

  HeadersEntry = _reflection.GeneratedProtocolMessageType('HeadersEntry', (_message.Message,), dict(
    DESCRIPTOR = _CONTENT_HEADERSENTRY,
    __module__ = 'mongo_pb2'
    # @@protoc_insertion_point(class_scope:mongo.content.HeadersEntry)
    ))
  ,
  DESCRIPTOR = _CONTENT,
  __module__ = 'mongo_pb2'
  # @@protoc_insertion_point(class_scope:mongo.content)
  ))
_sym_db.RegisterMessage(content)
_sym_db.RegisterMessage(content.HeadersEntry)

request = _reflection.GeneratedProtocolMessageType('request', (_message.Message,), dict(

  HeadersEntry = _reflection.GeneratedProtocolMessageType('HeadersEntry', (_message.Message,), dict(
    DESCRIPTOR = _REQUEST_HEADERSENTRY,
    __module__ = 'mongo_pb2'
    # @@protoc_insertion_point(class_scope:mongo.request.HeadersEntry)
    ))
  ,
  DESCRIPTOR = _REQUEST,
  __module__ = 'mongo_pb2'
  # @@protoc_insertion_point(class_scope:mongo.request)
  ))
_sym_db.RegisterMessage(request)
_sym_db.RegisterMessage(request.HeadersEntry)

response = _reflection.GeneratedProtocolMessageType('response', (_message.Message,), dict(
  DESCRIPTOR = _RESPONSE,
  __module__ = 'mongo_pb2'
  # @@protoc_insertion_point(class_scope:mongo.response)
  ))
_sym_db.RegisterMessage(response)


_CONTENT_HEADERSENTRY.has_options = True
_CONTENT_HEADERSENTRY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001'))
_REQUEST_HEADERSENTRY.has_options = True
_REQUEST_HEADERSENTRY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001'))
try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces


  class MongoStub(object):

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.echo = channel.unary_unary(
          '/mongo.Mongo/echo',
          request_serializer=content.SerializeToString,
          response_deserializer=content.FromString,
          )
      self.entry = channel.unary_unary(
          '/mongo.Mongo/entry',
          request_serializer=request.SerializeToString,
          response_deserializer=response.FromString,
          )
      self.DocumentSave = channel.unary_unary(
          '/mongo.Mongo/DocumentSave',
          request_serializer=request.SerializeToString,
          response_deserializer=response.FromString,
          )
      self.DocumentRead = channel.unary_unary(
          '/mongo.Mongo/DocumentRead',
          request_serializer=request.SerializeToString,
          response_deserializer=response.FromString,
          )
      self.DocumentDelete = channel.unary_unary(
          '/mongo.Mongo/DocumentDelete',
          request_serializer=request.SerializeToString,
          response_deserializer=response.FromString,
          )
      self.PasswordGet = channel.unary_unary(
          '/mongo.Mongo/PasswordGet',
          request_serializer=request.SerializeToString,
          response_deserializer=response.FromString,
          )
      self.PasswordSet = channel.unary_unary(
          '/mongo.Mongo/PasswordSet',
          request_serializer=request.SerializeToString,
          response_deserializer=response.FromString,
          )
      self.PasswordRemove = channel.unary_unary(
          '/mongo.Mongo/PasswordRemove',
          request_serializer=request.SerializeToString,
          response_deserializer=response.FromString,
          )
      self.GroupList = channel.unary_unary(
          '/mongo.Mongo/GroupList',
          request_serializer=request.SerializeToString,
          response_deserializer=response.FromString,
          )
      self.GroupRead = channel.unary_unary(
          '/mongo.Mongo/GroupRead',
          request_serializer=request.SerializeToString,
          response_deserializer=response.FromString,
          )
      self.GroupSave = channel.unary_unary(
          '/mongo.Mongo/GroupSave',
          request_serializer=request.SerializeToString,
          response_deserializer=response.FromString,
          )
      self.GroupDelete = channel.unary_unary(
          '/mongo.Mongo/GroupDelete',
          request_serializer=request.SerializeToString,
          response_deserializer=response.FromString,
          )
      self.GroupFindParent = channel.unary_unary(
          '/mongo.Mongo/GroupFindParent',
          request_serializer=request.SerializeToString,
          response_deserializer=response.FromString,
          )
      self.UsersFindParent = channel.unary_unary(
          '/mongo.Mongo/UsersFindParent',
          request_serializer=request.SerializeToString,
          response_deserializer=response.FromString,
          )
      self.BatchCreate = channel.unary_unary(
          '/mongo.Mongo/BatchCreate',
          request_serializer=request.SerializeToString,
          response_deserializer=response.FromString,
          )
      self.ArchiveDelete = channel.unary_unary(
          '/mongo.Mongo/ArchiveDelete',
          request_serializer=request.SerializeToString,
          response_deserializer=response.FromString,
          )
      self.CloudCacheGet = channel.unary_unary(
          '/mongo.Mongo/CloudCacheGet',
          request_serializer=request.SerializeToString,
          response_deserializer=response.FromString,
          )
      self.CloudCacheSet = channel.unary_unary(
          '/mongo.Mongo/CloudCacheSet',
          request_serializer=request.SerializeToString,
          response_deserializer=response.FromString,
          )
      self.CloudCacheDelete = channel.unary_unary(
          '/mongo.Mongo/CloudCacheDelete',
          request_serializer=request.SerializeToString,
          response_deserializer=response.FromString,
          )


  class MongoServicer(object):

    def echo(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def entry(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def DocumentSave(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def DocumentRead(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def DocumentDelete(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def PasswordGet(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def PasswordSet(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def PasswordRemove(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GroupList(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GroupRead(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GroupSave(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GroupDelete(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GroupFindParent(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def UsersFindParent(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def BatchCreate(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def ArchiveDelete(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def CloudCacheGet(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def CloudCacheSet(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def CloudCacheDelete(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_MongoServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'echo': grpc.unary_unary_rpc_method_handler(
            servicer.echo,
            request_deserializer=content.FromString,
            response_serializer=content.SerializeToString,
        ),
        'entry': grpc.unary_unary_rpc_method_handler(
            servicer.entry,
            request_deserializer=request.FromString,
            response_serializer=response.SerializeToString,
        ),
        'DocumentSave': grpc.unary_unary_rpc_method_handler(
            servicer.DocumentSave,
            request_deserializer=request.FromString,
            response_serializer=response.SerializeToString,
        ),
        'DocumentRead': grpc.unary_unary_rpc_method_handler(
            servicer.DocumentRead,
            request_deserializer=request.FromString,
            response_serializer=response.SerializeToString,
        ),
        'DocumentDelete': grpc.unary_unary_rpc_method_handler(
            servicer.DocumentDelete,
            request_deserializer=request.FromString,
            response_serializer=response.SerializeToString,
        ),
        'PasswordGet': grpc.unary_unary_rpc_method_handler(
            servicer.PasswordGet,
            request_deserializer=request.FromString,
            response_serializer=response.SerializeToString,
        ),
        'PasswordSet': grpc.unary_unary_rpc_method_handler(
            servicer.PasswordSet,
            request_deserializer=request.FromString,
            response_serializer=response.SerializeToString,
        ),
        'PasswordRemove': grpc.unary_unary_rpc_method_handler(
            servicer.PasswordRemove,
            request_deserializer=request.FromString,
            response_serializer=response.SerializeToString,
        ),
        'GroupList': grpc.unary_unary_rpc_method_handler(
            servicer.GroupList,
            request_deserializer=request.FromString,
            response_serializer=response.SerializeToString,
        ),
        'GroupRead': grpc.unary_unary_rpc_method_handler(
            servicer.GroupRead,
            request_deserializer=request.FromString,
            response_serializer=response.SerializeToString,
        ),
        'GroupSave': grpc.unary_unary_rpc_method_handler(
            servicer.GroupSave,
            request_deserializer=request.FromString,
            response_serializer=response.SerializeToString,
        ),
        'GroupDelete': grpc.unary_unary_rpc_method_handler(
            servicer.GroupDelete,
            request_deserializer=request.FromString,
            response_serializer=response.SerializeToString,
        ),
        'GroupFindParent': grpc.unary_unary_rpc_method_handler(
            servicer.GroupFindParent,
            request_deserializer=request.FromString,
            response_serializer=response.SerializeToString,
        ),
        'UsersFindParent': grpc.unary_unary_rpc_method_handler(
            servicer.UsersFindParent,
            request_deserializer=request.FromString,
            response_serializer=response.SerializeToString,
        ),
        'BatchCreate': grpc.unary_unary_rpc_method_handler(
            servicer.BatchCreate,
            request_deserializer=request.FromString,
            response_serializer=response.SerializeToString,
        ),
        'ArchiveDelete': grpc.unary_unary_rpc_method_handler(
            servicer.ArchiveDelete,
            request_deserializer=request.FromString,
            response_serializer=response.SerializeToString,
        ),
        'CloudCacheGet': grpc.unary_unary_rpc_method_handler(
            servicer.CloudCacheGet,
            request_deserializer=request.FromString,
            response_serializer=response.SerializeToString,
        ),
        'CloudCacheSet': grpc.unary_unary_rpc_method_handler(
            servicer.CloudCacheSet,
            request_deserializer=request.FromString,
            response_serializer=response.SerializeToString,
        ),
        'CloudCacheDelete': grpc.unary_unary_rpc_method_handler(
            servicer.CloudCacheDelete,
            request_deserializer=request.FromString,
            response_serializer=response.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'mongo.Mongo', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaMongoServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def echo(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def entry(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def DocumentSave(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def DocumentRead(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def DocumentDelete(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def PasswordGet(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def PasswordSet(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def PasswordRemove(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GroupList(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GroupRead(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GroupSave(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GroupDelete(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GroupFindParent(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def UsersFindParent(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def BatchCreate(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def ArchiveDelete(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def CloudCacheGet(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def CloudCacheSet(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def CloudCacheDelete(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaMongoStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def echo(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    echo.future = None
    def entry(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    entry.future = None
    def DocumentSave(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    DocumentSave.future = None
    def DocumentRead(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    DocumentRead.future = None
    def DocumentDelete(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    DocumentDelete.future = None
    def PasswordGet(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    PasswordGet.future = None
    def PasswordSet(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    PasswordSet.future = None
    def PasswordRemove(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    PasswordRemove.future = None
    def GroupList(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    GroupList.future = None
    def GroupRead(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    GroupRead.future = None
    def GroupSave(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    GroupSave.future = None
    def GroupDelete(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    GroupDelete.future = None
    def GroupFindParent(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    GroupFindParent.future = None
    def UsersFindParent(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    UsersFindParent.future = None
    def BatchCreate(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    BatchCreate.future = None
    def ArchiveDelete(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    ArchiveDelete.future = None
    def CloudCacheGet(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    CloudCacheGet.future = None
    def CloudCacheSet(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    CloudCacheSet.future = None
    def CloudCacheDelete(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    CloudCacheDelete.future = None


  def beta_create_Mongo_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('mongo.Mongo', 'ArchiveDelete'): request.FromString,
      ('mongo.Mongo', 'BatchCreate'): request.FromString,
      ('mongo.Mongo', 'CloudCacheDelete'): request.FromString,
      ('mongo.Mongo', 'CloudCacheGet'): request.FromString,
      ('mongo.Mongo', 'CloudCacheSet'): request.FromString,
      ('mongo.Mongo', 'DocumentDelete'): request.FromString,
      ('mongo.Mongo', 'DocumentRead'): request.FromString,
      ('mongo.Mongo', 'DocumentSave'): request.FromString,
      ('mongo.Mongo', 'GroupDelete'): request.FromString,
      ('mongo.Mongo', 'GroupFindParent'): request.FromString,
      ('mongo.Mongo', 'GroupList'): request.FromString,
      ('mongo.Mongo', 'GroupRead'): request.FromString,
      ('mongo.Mongo', 'GroupSave'): request.FromString,
      ('mongo.Mongo', 'PasswordGet'): request.FromString,
      ('mongo.Mongo', 'PasswordRemove'): request.FromString,
      ('mongo.Mongo', 'PasswordSet'): request.FromString,
      ('mongo.Mongo', 'UsersFindParent'): request.FromString,
      ('mongo.Mongo', 'echo'): content.FromString,
      ('mongo.Mongo', 'entry'): request.FromString,
    }
    response_serializers = {
      ('mongo.Mongo', 'ArchiveDelete'): response.SerializeToString,
      ('mongo.Mongo', 'BatchCreate'): response.SerializeToString,
      ('mongo.Mongo', 'CloudCacheDelete'): response.SerializeToString,
      ('mongo.Mongo', 'CloudCacheGet'): response.SerializeToString,
      ('mongo.Mongo', 'CloudCacheSet'): response.SerializeToString,
      ('mongo.Mongo', 'DocumentDelete'): response.SerializeToString,
      ('mongo.Mongo', 'DocumentRead'): response.SerializeToString,
      ('mongo.Mongo', 'DocumentSave'): response.SerializeToString,
      ('mongo.Mongo', 'GroupDelete'): response.SerializeToString,
      ('mongo.Mongo', 'GroupFindParent'): response.SerializeToString,
      ('mongo.Mongo', 'GroupList'): response.SerializeToString,
      ('mongo.Mongo', 'GroupRead'): response.SerializeToString,
      ('mongo.Mongo', 'GroupSave'): response.SerializeToString,
      ('mongo.Mongo', 'PasswordGet'): response.SerializeToString,
      ('mongo.Mongo', 'PasswordRemove'): response.SerializeToString,
      ('mongo.Mongo', 'PasswordSet'): response.SerializeToString,
      ('mongo.Mongo', 'UsersFindParent'): response.SerializeToString,
      ('mongo.Mongo', 'echo'): content.SerializeToString,
      ('mongo.Mongo', 'entry'): response.SerializeToString,
    }
    method_implementations = {
      ('mongo.Mongo', 'ArchiveDelete'): face_utilities.unary_unary_inline(servicer.ArchiveDelete),
      ('mongo.Mongo', 'BatchCreate'): face_utilities.unary_unary_inline(servicer.BatchCreate),
      ('mongo.Mongo', 'CloudCacheDelete'): face_utilities.unary_unary_inline(servicer.CloudCacheDelete),
      ('mongo.Mongo', 'CloudCacheGet'): face_utilities.unary_unary_inline(servicer.CloudCacheGet),
      ('mongo.Mongo', 'CloudCacheSet'): face_utilities.unary_unary_inline(servicer.CloudCacheSet),
      ('mongo.Mongo', 'DocumentDelete'): face_utilities.unary_unary_inline(servicer.DocumentDelete),
      ('mongo.Mongo', 'DocumentRead'): face_utilities.unary_unary_inline(servicer.DocumentRead),
      ('mongo.Mongo', 'DocumentSave'): face_utilities.unary_unary_inline(servicer.DocumentSave),
      ('mongo.Mongo', 'GroupDelete'): face_utilities.unary_unary_inline(servicer.GroupDelete),
      ('mongo.Mongo', 'GroupFindParent'): face_utilities.unary_unary_inline(servicer.GroupFindParent),
      ('mongo.Mongo', 'GroupList'): face_utilities.unary_unary_inline(servicer.GroupList),
      ('mongo.Mongo', 'GroupRead'): face_utilities.unary_unary_inline(servicer.GroupRead),
      ('mongo.Mongo', 'GroupSave'): face_utilities.unary_unary_inline(servicer.GroupSave),
      ('mongo.Mongo', 'PasswordGet'): face_utilities.unary_unary_inline(servicer.PasswordGet),
      ('mongo.Mongo', 'PasswordRemove'): face_utilities.unary_unary_inline(servicer.PasswordRemove),
      ('mongo.Mongo', 'PasswordSet'): face_utilities.unary_unary_inline(servicer.PasswordSet),
      ('mongo.Mongo', 'UsersFindParent'): face_utilities.unary_unary_inline(servicer.UsersFindParent),
      ('mongo.Mongo', 'echo'): face_utilities.unary_unary_inline(servicer.echo),
      ('mongo.Mongo', 'entry'): face_utilities.unary_unary_inline(servicer.entry),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_Mongo_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('mongo.Mongo', 'ArchiveDelete'): request.SerializeToString,
      ('mongo.Mongo', 'BatchCreate'): request.SerializeToString,
      ('mongo.Mongo', 'CloudCacheDelete'): request.SerializeToString,
      ('mongo.Mongo', 'CloudCacheGet'): request.SerializeToString,
      ('mongo.Mongo', 'CloudCacheSet'): request.SerializeToString,
      ('mongo.Mongo', 'DocumentDelete'): request.SerializeToString,
      ('mongo.Mongo', 'DocumentRead'): request.SerializeToString,
      ('mongo.Mongo', 'DocumentSave'): request.SerializeToString,
      ('mongo.Mongo', 'GroupDelete'): request.SerializeToString,
      ('mongo.Mongo', 'GroupFindParent'): request.SerializeToString,
      ('mongo.Mongo', 'GroupList'): request.SerializeToString,
      ('mongo.Mongo', 'GroupRead'): request.SerializeToString,
      ('mongo.Mongo', 'GroupSave'): request.SerializeToString,
      ('mongo.Mongo', 'PasswordGet'): request.SerializeToString,
      ('mongo.Mongo', 'PasswordRemove'): request.SerializeToString,
      ('mongo.Mongo', 'PasswordSet'): request.SerializeToString,
      ('mongo.Mongo', 'UsersFindParent'): request.SerializeToString,
      ('mongo.Mongo', 'echo'): content.SerializeToString,
      ('mongo.Mongo', 'entry'): request.SerializeToString,
    }
    response_deserializers = {
      ('mongo.Mongo', 'ArchiveDelete'): response.FromString,
      ('mongo.Mongo', 'BatchCreate'): response.FromString,
      ('mongo.Mongo', 'CloudCacheDelete'): response.FromString,
      ('mongo.Mongo', 'CloudCacheGet'): response.FromString,
      ('mongo.Mongo', 'CloudCacheSet'): response.FromString,
      ('mongo.Mongo', 'DocumentDelete'): response.FromString,
      ('mongo.Mongo', 'DocumentRead'): response.FromString,
      ('mongo.Mongo', 'DocumentSave'): response.FromString,
      ('mongo.Mongo', 'GroupDelete'): response.FromString,
      ('mongo.Mongo', 'GroupFindParent'): response.FromString,
      ('mongo.Mongo', 'GroupList'): response.FromString,
      ('mongo.Mongo', 'GroupRead'): response.FromString,
      ('mongo.Mongo', 'GroupSave'): response.FromString,
      ('mongo.Mongo', 'PasswordGet'): response.FromString,
      ('mongo.Mongo', 'PasswordRemove'): response.FromString,
      ('mongo.Mongo', 'PasswordSet'): response.FromString,
      ('mongo.Mongo', 'UsersFindParent'): response.FromString,
      ('mongo.Mongo', 'echo'): content.FromString,
      ('mongo.Mongo', 'entry'): response.FromString,
    }
    cardinalities = {
      'ArchiveDelete': cardinality.Cardinality.UNARY_UNARY,
      'BatchCreate': cardinality.Cardinality.UNARY_UNARY,
      'CloudCacheDelete': cardinality.Cardinality.UNARY_UNARY,
      'CloudCacheGet': cardinality.Cardinality.UNARY_UNARY,
      'CloudCacheSet': cardinality.Cardinality.UNARY_UNARY,
      'DocumentDelete': cardinality.Cardinality.UNARY_UNARY,
      'DocumentRead': cardinality.Cardinality.UNARY_UNARY,
      'DocumentSave': cardinality.Cardinality.UNARY_UNARY,
      'GroupDelete': cardinality.Cardinality.UNARY_UNARY,
      'GroupFindParent': cardinality.Cardinality.UNARY_UNARY,
      'GroupList': cardinality.Cardinality.UNARY_UNARY,
      'GroupRead': cardinality.Cardinality.UNARY_UNARY,
      'GroupSave': cardinality.Cardinality.UNARY_UNARY,
      'PasswordGet': cardinality.Cardinality.UNARY_UNARY,
      'PasswordRemove': cardinality.Cardinality.UNARY_UNARY,
      'PasswordSet': cardinality.Cardinality.UNARY_UNARY,
      'UsersFindParent': cardinality.Cardinality.UNARY_UNARY,
      'echo': cardinality.Cardinality.UNARY_UNARY,
      'entry': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'mongo.Mongo', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
