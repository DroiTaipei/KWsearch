# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities

import mongo_pb2 as mongo__pb2


class MongoStub(object):

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.echo = channel.unary_unary(
        '/mongo.Mongo/echo',
        request_serializer=mongo__pb2.content.SerializeToString,
        response_deserializer=mongo__pb2.content.FromString,
        )
    self.entry = channel.unary_unary(
        '/mongo.Mongo/entry',
        request_serializer=mongo__pb2.request.SerializeToString,
        response_deserializer=mongo__pb2.response.FromString,
        )
    self.DocumentSave = channel.unary_unary(
        '/mongo.Mongo/DocumentSave',
        request_serializer=mongo__pb2.request.SerializeToString,
        response_deserializer=mongo__pb2.response.FromString,
        )
    self.DocumentRead = channel.unary_unary(
        '/mongo.Mongo/DocumentRead',
        request_serializer=mongo__pb2.request.SerializeToString,
        response_deserializer=mongo__pb2.response.FromString,
        )
    self.DocumentDelete = channel.unary_unary(
        '/mongo.Mongo/DocumentDelete',
        request_serializer=mongo__pb2.request.SerializeToString,
        response_deserializer=mongo__pb2.response.FromString,
        )
    self.PasswordGet = channel.unary_unary(
        '/mongo.Mongo/PasswordGet',
        request_serializer=mongo__pb2.request.SerializeToString,
        response_deserializer=mongo__pb2.response.FromString,
        )
    self.PasswordSet = channel.unary_unary(
        '/mongo.Mongo/PasswordSet',
        request_serializer=mongo__pb2.request.SerializeToString,
        response_deserializer=mongo__pb2.response.FromString,
        )
    self.PasswordRemove = channel.unary_unary(
        '/mongo.Mongo/PasswordRemove',
        request_serializer=mongo__pb2.request.SerializeToString,
        response_deserializer=mongo__pb2.response.FromString,
        )
    self.GroupList = channel.unary_unary(
        '/mongo.Mongo/GroupList',
        request_serializer=mongo__pb2.request.SerializeToString,
        response_deserializer=mongo__pb2.response.FromString,
        )
    self.GroupRead = channel.unary_unary(
        '/mongo.Mongo/GroupRead',
        request_serializer=mongo__pb2.request.SerializeToString,
        response_deserializer=mongo__pb2.response.FromString,
        )
    self.GroupSave = channel.unary_unary(
        '/mongo.Mongo/GroupSave',
        request_serializer=mongo__pb2.request.SerializeToString,
        response_deserializer=mongo__pb2.response.FromString,
        )
    self.GroupDelete = channel.unary_unary(
        '/mongo.Mongo/GroupDelete',
        request_serializer=mongo__pb2.request.SerializeToString,
        response_deserializer=mongo__pb2.response.FromString,
        )
    self.GroupFindParent = channel.unary_unary(
        '/mongo.Mongo/GroupFindParent',
        request_serializer=mongo__pb2.request.SerializeToString,
        response_deserializer=mongo__pb2.response.FromString,
        )
    self.UsersFindParent = channel.unary_unary(
        '/mongo.Mongo/UsersFindParent',
        request_serializer=mongo__pb2.request.SerializeToString,
        response_deserializer=mongo__pb2.response.FromString,
        )
    self.BatchCreate = channel.unary_unary(
        '/mongo.Mongo/BatchCreate',
        request_serializer=mongo__pb2.request.SerializeToString,
        response_deserializer=mongo__pb2.response.FromString,
        )
    self.ArchiveDelete = channel.unary_unary(
        '/mongo.Mongo/ArchiveDelete',
        request_serializer=mongo__pb2.request.SerializeToString,
        response_deserializer=mongo__pb2.response.FromString,
        )
    self.CloudCacheGet = channel.unary_unary(
        '/mongo.Mongo/CloudCacheGet',
        request_serializer=mongo__pb2.request.SerializeToString,
        response_deserializer=mongo__pb2.response.FromString,
        )
    self.CloudCacheSet = channel.unary_unary(
        '/mongo.Mongo/CloudCacheSet',
        request_serializer=mongo__pb2.request.SerializeToString,
        response_deserializer=mongo__pb2.response.FromString,
        )
    self.CloudCacheDelete = channel.unary_unary(
        '/mongo.Mongo/CloudCacheDelete',
        request_serializer=mongo__pb2.request.SerializeToString,
        response_deserializer=mongo__pb2.response.FromString,
        )


class MongoServicer(object):

  def echo(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def entry(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def DocumentSave(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def DocumentRead(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def DocumentDelete(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def PasswordGet(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def PasswordSet(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def PasswordRemove(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GroupList(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GroupRead(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GroupSave(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GroupDelete(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GroupFindParent(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def UsersFindParent(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def BatchCreate(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ArchiveDelete(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def CloudCacheGet(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def CloudCacheSet(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def CloudCacheDelete(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_MongoServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'echo': grpc.unary_unary_rpc_method_handler(
          servicer.echo,
          request_deserializer=mongo__pb2.content.FromString,
          response_serializer=mongo__pb2.content.SerializeToString,
      ),
      'entry': grpc.unary_unary_rpc_method_handler(
          servicer.entry,
          request_deserializer=mongo__pb2.request.FromString,
          response_serializer=mongo__pb2.response.SerializeToString,
      ),
      'DocumentSave': grpc.unary_unary_rpc_method_handler(
          servicer.DocumentSave,
          request_deserializer=mongo__pb2.request.FromString,
          response_serializer=mongo__pb2.response.SerializeToString,
      ),
      'DocumentRead': grpc.unary_unary_rpc_method_handler(
          servicer.DocumentRead,
          request_deserializer=mongo__pb2.request.FromString,
          response_serializer=mongo__pb2.response.SerializeToString,
      ),
      'DocumentDelete': grpc.unary_unary_rpc_method_handler(
          servicer.DocumentDelete,
          request_deserializer=mongo__pb2.request.FromString,
          response_serializer=mongo__pb2.response.SerializeToString,
      ),
      'PasswordGet': grpc.unary_unary_rpc_method_handler(
          servicer.PasswordGet,
          request_deserializer=mongo__pb2.request.FromString,
          response_serializer=mongo__pb2.response.SerializeToString,
      ),
      'PasswordSet': grpc.unary_unary_rpc_method_handler(
          servicer.PasswordSet,
          request_deserializer=mongo__pb2.request.FromString,
          response_serializer=mongo__pb2.response.SerializeToString,
      ),
      'PasswordRemove': grpc.unary_unary_rpc_method_handler(
          servicer.PasswordRemove,
          request_deserializer=mongo__pb2.request.FromString,
          response_serializer=mongo__pb2.response.SerializeToString,
      ),
      'GroupList': grpc.unary_unary_rpc_method_handler(
          servicer.GroupList,
          request_deserializer=mongo__pb2.request.FromString,
          response_serializer=mongo__pb2.response.SerializeToString,
      ),
      'GroupRead': grpc.unary_unary_rpc_method_handler(
          servicer.GroupRead,
          request_deserializer=mongo__pb2.request.FromString,
          response_serializer=mongo__pb2.response.SerializeToString,
      ),
      'GroupSave': grpc.unary_unary_rpc_method_handler(
          servicer.GroupSave,
          request_deserializer=mongo__pb2.request.FromString,
          response_serializer=mongo__pb2.response.SerializeToString,
      ),
      'GroupDelete': grpc.unary_unary_rpc_method_handler(
          servicer.GroupDelete,
          request_deserializer=mongo__pb2.request.FromString,
          response_serializer=mongo__pb2.response.SerializeToString,
      ),
      'GroupFindParent': grpc.unary_unary_rpc_method_handler(
          servicer.GroupFindParent,
          request_deserializer=mongo__pb2.request.FromString,
          response_serializer=mongo__pb2.response.SerializeToString,
      ),
      'UsersFindParent': grpc.unary_unary_rpc_method_handler(
          servicer.UsersFindParent,
          request_deserializer=mongo__pb2.request.FromString,
          response_serializer=mongo__pb2.response.SerializeToString,
      ),
      'BatchCreate': grpc.unary_unary_rpc_method_handler(
          servicer.BatchCreate,
          request_deserializer=mongo__pb2.request.FromString,
          response_serializer=mongo__pb2.response.SerializeToString,
      ),
      'ArchiveDelete': grpc.unary_unary_rpc_method_handler(
          servicer.ArchiveDelete,
          request_deserializer=mongo__pb2.request.FromString,
          response_serializer=mongo__pb2.response.SerializeToString,
      ),
      'CloudCacheGet': grpc.unary_unary_rpc_method_handler(
          servicer.CloudCacheGet,
          request_deserializer=mongo__pb2.request.FromString,
          response_serializer=mongo__pb2.response.SerializeToString,
      ),
      'CloudCacheSet': grpc.unary_unary_rpc_method_handler(
          servicer.CloudCacheSet,
          request_deserializer=mongo__pb2.request.FromString,
          response_serializer=mongo__pb2.response.SerializeToString,
      ),
      'CloudCacheDelete': grpc.unary_unary_rpc_method_handler(
          servicer.CloudCacheDelete,
          request_deserializer=mongo__pb2.request.FromString,
          response_serializer=mongo__pb2.response.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'mongo.Mongo', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
