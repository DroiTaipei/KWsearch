// Use the protocol buffer compiler to generate client and server code.
// $ protoc --go_out=plugins=grpc:. mongo.proto

syntax = "proto3";

package mongo;

service Mongo {
    rpc echo(content) returns (content) {}
    rpc entry(request) returns (response) {}
    rpc DocumentSave(request) returns (response) {}
    rpc DocumentRead(request) returns (response) {}
    rpc DocumentDelete(request) returns (response) {}
    rpc PasswordGet(request) returns (response) {}
    rpc PasswordSet(request) returns (response) {}
    rpc PasswordRemove(request) returns (response) {}
    rpc GroupList(request) returns (response) {}
    rpc GroupRead(request) returns (response) {}
    rpc GroupSave(request) returns (response) {}
    rpc GroupDelete(request) returns (response) {}
    rpc GroupFindParent(request) returns (response) {}
    rpc UsersFindParent(request) returns (response) {}
    rpc BatchCreate(request) returns (response) {}
    rpc ArchiveDelete(request) returns (response) {}
    rpc CloudCacheGet(request) returns (response) {}
    rpc CloudCacheSet(request) returns (response) {}
    rpc CloudCacheDelete(request) returns (response) {}
}


message content {
      bytes body = 1;
      map<string, string> headers = 2;
}

message request {
      bytes body = 5;
      map<string, string> headers = 6;
}

message response {
      bytes body = 2;
}

